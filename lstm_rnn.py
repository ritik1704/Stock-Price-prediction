# -*- coding: utf-8 -*-
"""LSTM_RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11LKxrSN6OaBI1b8YXvR-zVkkOX5iucH1
"""

import tensorflow as tf

tf.__version__

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

df_train= pd.read_csv('Google_Stock_Price_Train.csv')

training_set = df_train.iloc[:,1:2].values
training_set

from sklearn.preprocessing import MinMaxScaler

sc= MinMaxScaler(feature_range=(0,1))
scaled_training_Set = sc.fit_transform(training_set)
scaled_training_Set.shape

# creating 60 timesteps and give output
x_train=[]
y_train=[]
for i in range(60,1258):
  x_train.append(scaled_training_Set[i-60:i,0])
  y_train.append(scaled_training_Set[i,0])
x_train = np.array(x_train)
y_train = np.array(y_train)

x_train

x_train = np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1)) #observation , timestep, indicator

x_train.shape

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout #to avoid overfitting

regressor = Sequential()

regressor.add(LSTM(units=50,return_sequences=True,input_shape=(x_train.shape[1],1)))

regressor.add(Dropout(0.2))

regressor.add(LSTM(units=50,return_sequences=True))
regressor.add(Dropout(0.2))

regressor.add(LSTM(units=50,return_sequences=True))
regressor.add(Dropout(0.2))

regressor.add(LSTM(units=50,return_sequences=True))
regressor.add(Dropout(0.2))

regressor.add(LSTM(units=50,return_sequences=False))
regressor.add(Dropout(0.2))

regressor.add(Dense(units=1))

regressor.compile(optimizer='adam',loss='mean_squared_error',metrics=['accuracy'])  #rmsprop is also good choice for rnn

regressor.fit(x_train,y_train,epochs=50,batch_size=32)

df_test= pd.read_csv('Google_Stock_Price_Test.csv')

real_stock_price = df_test.iloc[:,1:2].values
real_stock_price

df_train,df_test

df_total= pd.concat((df_train['Open'],df_test['Open']),axis=0)

inputs=df_total[len(df_total)-len(df_test)-60:].values

inputs=inputs.reshape(-1,1)
inputs

inputs= sc.transform(inputs)

# creating 60 timesteps and give output
x_test=[]

for i in range(60,80):
  x_test.append(inputs[i-60:i,0])
x_test = np.array(x_test)

x_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1)) #observation , timestep, indicator

predicted_stock_price=regressor.predict(x_test)
predicted_stock_price= sc.inverse_transform(predicted_stock_price)
predicted_stock_price

#visualisation of trends of stock price

plt.plot(real_stock_price,color='red',label='REAL GOOGLE STOCK PRICE')
plt.plot(predicted_stock_price,color='blue',label='PREDICTED STOCK PRICE')
plt.title('GOOGLE STOCK PRICE PREDICTION CHART')
plt.xlabel('TIME')
plt.ylabel('GOOGLE STOCK PRICE')
plt.legend()
plt.show()

